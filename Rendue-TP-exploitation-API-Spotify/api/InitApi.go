package api

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"time"
)

var Token string

// RequestApi sends a GET request to the API, retrieves its JSON response, and decodes it into the appropriate structure.
func RequestApi(apiURL string) {
	// Initialize the HTTP client
	httpClient := http.Client{
		Timeout: time.Second * 2, // Timeout after 2 seconds
	}
	// Create an HTTP request with a GET method to the API
	req, errReq := http.NewRequest("GET", apiURL, nil)
	if errReq != nil {
		fmt.Println("Erreur de requete :", errReq.Error())
		os.Exit(1)
	}
	// Add the token to the header for authorization to make requests to the Spotify API
	req.Header.Set("Authorization", "Bearer "+Token)

	// Execute the HTTP request to the API
	resp, errRes := httpClient.Do(req)
	if resp.Body != nil {
		defer resp.Body.Close()
	} else {
		fmt.Println("Erreur r√©ponse:", errRes.Error())
		os.Exit(2)
	}

	// Read the body of the HTTP request
	body, errBody := io.ReadAll(resp.Body)
	if errBody != nil {
		fmt.Println("Error reading response body:", errBody.Error())
		os.Exit(3)
	}
	// Determine the structure to decode the JSON based on the API URL
	if apiURL == "https://api.spotify.com/v1/artists/3IW7ScrzXmPvZhB27hmfgy/albums?market=FR" {
		// Decode the JSON data into a specific structure
		json.Unmarshal(body, &Rap2)
	} else {
		json.Unmarshal(body, &Rap1)
	}
}

/* Reloads the token if it has expired (token has a 1-hour lifespan)
   Utilizes guidance from StackOverflow, so there may be room for optimization */

func ReloadApi() {
	// Spotify API URL for obtaining the token
	urlToken := "https://accounts.spotify.com/api/token"
	const clientId = "b2717725a58e4d6faccd1ee5fd5bd55b" // Do not modify
	const clientSecret = "67c6ede35f3846bc95c2093a4d6e232c"

	httpClient := http.Client{
		Timeout: time.Second * 2,
	}
	// Create the body of the request to obtain the token
	BodyReq := bytes.NewBufferString("grant_type=client_credentials&client_id=" + clientId + "&client_secret=" + clientSecret)

	// Create an HTTP request to the API using POST method with the token URL and request body
	req, errReq := http.NewRequest("POST", urlToken, BodyReq)
	if errReq != nil {
		fmt.Println("Error creating request:", errReq.Error())
		os.Exit(1)
	}
	// Necessary metadata in the header for a POST request
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, errRes := httpClient.Do(req)
	if resp.Body != nil {
		defer resp.Body.Close()
	} else {
		fmt.Println("Error creating response:", errRes.Error())
		os.Exit(2)
	}
	// Decode the JSON into a map (alternative solution since putting it into a struct wasn't successful)
	var repMap map[string]interface{}

	decoder := json.NewDecoder(resp.Body)
	errJSON := decoder.Decode(&repMap)
	if errJSON != nil {
		fmt.Println("Erreur de lecture:", errJSON.Error)
		os.Exit(4)
	}
	// Update the global variable with the new token
	Token = repMap["access_token"].(string)
}
